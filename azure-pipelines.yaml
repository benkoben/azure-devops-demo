# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - main

# change this to self-hosted pool
pool:
  name: "Azure Pipelines"
  vmImage: 'ubuntu-18.04'


variables:
    # ------ Do change variables below --------
    # See "service connections" under Azure DevOps organization settings
    - name: env
      value: dev

    - name: azure_subscription
      value: 'azure-devops-demo-sp'

    - name: terraform_version
      value: '0.15.0' # terraform-compliance requires this version explicitly. Check https://github.com/terraform-compliance/cli/blob/master/CHANGELOG.md

    - group: 'devops-service-connection-credentials'

stages:
  - stage: 'VerifyAndPublish'
    displayName: 'Continuous Integration'
    jobs:
      - job: "CheckCompliance"
        continueOnError: false
        steps:

        - checkout: self
          persistCredentials: true
          clean: true

        - task: TerraformTaskV2@2
          displayName: 'Terraform init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(Build.SourcesDirectory)/terraform'
            backendServiceArm: '$(azure_subscription)'
            backendAzureRmResourceGroupName: "ado-demo-weeu-dev-001"
            backendAzureRmStorageAccountName: "$(svc-azr-devops-storage-account-name)"
            backendAzureRmContainerName: "connectivity-weeu-$(env)-001"
            backendAzureRmKey: "connectivity-weeu-$(env)-001.tfstate"

        - task: TerraformTaskV2@2
          displayName: 'Terraform plan'
          inputs:
            command: plan
            workingDirectory: '$(Build.SourcesDirectory)/terraform'
            commandOptions: >
              -var "primary_azure_subscription_id=$(svc-azr-devops-subscription-id)"
              -var "primary_azure_client_id=$(svc-azr-devops-client-id)"
              -var "primary_azure_client_secret=$(svc-azr-devops-client-secret)"
              -var "primary_azure_tenant_id=$(svc-azr-devops-tenant-id)"
              -var "location=westeurope"
              -var "env=$(env)"
              -input=false 
              -out $(Build.BuildId).tfplan
            environmentServiceNameAzureRM: '$(azure_subscription)'

        - task: ArchiveFiles@2
          displayName: 'Create Plan Artifact'
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)'

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: drop'

# Normally CI and CD are separated pipeline files
# but for demo purposes we separate them by stage instead
  - stage: 'Apply'
    displayName: 'Continuous Deployment'
    jobs:
      - job: "Release"
        steps:
        - task: DownloadBuildArtifacts@1
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'drop'
            downloadPath: '$(System.ArtifactsDirectory)'

        - task: ExtractFiles@1
          inputs:
            archiveFilePatterns: '$(System.ArtifactsDirectory)/**/*.zip'
            destinationFolder: '$(System.ArtifactsDirectory)/release'
            cleanDestinationFolder: true
            overwriteExistingFiles: true

        - task: TerraformTaskV2@2
          displayName: 'Terraform init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.ArtifactsDirectory)/release/s/terraform'
            backendServiceArm: '$(azure_subscription)'
            backendAzureRmResourceGroupName: "ado-demo-weeu-dev-001"
            backendAzureRmStorageAccountName: "$(svc-azr-devops-storage-account-name)"
            backendAzureRmContainerName: "connectivity-weeu-$(env)-001"
            backendAzureRmKey: "connectivity-weeu-$(env)-001.tfstate"

        - task: TerraformTaskV2@2
          displayName: 'Terraform apply'
          inputs:
            command: apply
            workingDirectory: '$(System.ArtifactsDirectory)/release/s/terraform'
            commandOptions: >
              -input=false 
              $(Build.BuildId).tfplan
            environmentServiceNameAzureRM: '$(azure_subscription)'